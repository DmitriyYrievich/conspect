babel.js or typescript - 
webpack, brunch, gulp - 









								TASK


TRY / CATCH - 
try..catch работает только в синхронном коде
try..catch подразумевает, что код синтаксически верен
Секцию finally используют, чтобы завершить начатые операции при любом варианте развития событий.(Блок finally срабатывает при любом выходе из try..catch, в том числе и return.)

1) Выполняется код внутри блока try.

2) Если в нём ошибок нет, то блок catch(err) игнорируется, то есть выполнение доходит до конца try и потом прыгает через catch.

3) Если в нём возникнет ошибка, то выполнение try на ней прерывается, и управление прыгает в начало блока catch(err).
getter/setter - 
colback - Функция обратного вызова — это функция, которая передается другой функции в качестве параметра и та, в свою очередь, вызывает переданную функцию.

sync/async in js - промисы в es6 позволяют выполнять код синхронно, их встроенные колбеки вызываются только при определенных событиях(по завершению)

ПРОТОТИП  - цепочка в поиске метода/свойства поднимается до OBJECt(у него нет прототипов), те что ниже в цепочке перекрывают тех что выше === наследование

obj.__proto__(внутри екземпляра) или prototupe(внутри конструктора) - ссылка на прототип 
Foo.prototupe = window - присвоение прототипа

=> при создании New Foo() - прототип екземпляра класса тот же что и у функц конструктора

=> задавать Foo.prototupe = funct() - нужно до инициализации екземпляра

var test = Object.getPrototupeOf(anyObj) - достать прототип указанного обекта
Foo.hasOwnPropery("name") - принадлежит ли метод исключительно данному обекту(не прототипу) 
Object.create(obj) - создание нового обекта, с указанным в параметрах прототипом


ЗАМЫКАНИЯ => это функции, ссылающиеся на независимые (свободные) переменные. Другими словами, функция, определённая в замыкании, «запоминает» окружение, в котором она была создана.


РЕКУРСИЯ => когда функция вызывает сама себя. Это называется рекурсией.

Рекурсия используется для ситуаций, когда выполнение одной сложной задачи можно представить как некое действие в совокупности с решением той же задачи в более простом варианте.


for in - проходит свойства добавленные от прототипов, проходит иногда в случайном порядке
for of - для работы с со списками map && set, перебор данных масивоподобных, списка DOM, строками
