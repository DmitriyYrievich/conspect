angular.bootstrap777
Чтобы лучше контролировать процесс инициализации, можно использовать загрузку вручную.
Например, когда необходимо включить загрузчик скриптов или выполнить какие-то действия
перед компиляцией страницы Angular'ом.
http://www.codehint.ru/articles/2013-06-23_angularjs_bootstrap
https://github.com/AngularjsRUS/angular-doc/blob/master/docs/content/guide/bootstrap.ngdoc



В иделе UI компоненту не должно быть дела где он используется, а так же из чего состоят компоненты, которые он использует.
Если же вы работаете с событиями DOM — то опять же для этого есть директивы, компоненты ничего не должны знать о DOM.

У любого дерева компонентов должен быть корень, базовый элемент описывающий весь UI

Разработчики смогут делать отдельные самодостаточные компоненты, покрывать их тестами и предоставлять другим членам команды.

Cостояние данных должно получаться извне директив и прокидываться внутрь через биндинги.В компоненте верхнего уровня будет все состояние для скрина, он будет прокидывать нужную часть состояния в дочерние компоненты и так далее.

***
Вместо того что бы менять состояние прямо в компоненте, имеет смысл просить это сделать сервисы, складывая всю ответственность на них. Они в свою очередь должны будут обновить состояние на верхнем уровне, что в итоге обновит состояние компонента, который и запустил всю эту цепочку.

можно все же чуть чуть состояния хранить и менять прямо в контроллере. Обычно это состояние специфичное именно для этого конкретного компонента. 
***

Но в контроллерах/сервисах использовать $scope не рекомендуется. 

системы событий $emit/$broadcast/$on. Просто не используете их.
$apply и $digest.  - не использовать в компонентах, только в директивах
Ну и на сладкое — $watch - http://beta.itnan.ru/post.php?c=1&p=277087

Как мы уже говорили, нашим компонентам не должно быть дело как работают компоненты на более низких уровнях. И нужную часть состояние мы передаем сверху вниз, и в принципе что с ними происходит далее нас не волнует.

***
 Для того, что бы компонент мог прокидывать кусок документа в свой шаблон, в определении компонента нам надо указать transclude: true, и затем поместить директиву ngTransclude на нужный элемент.
***

Директивы можно расценивать как декораторы для компонентов.
Делается это при помощи указания зависимости от другой директивы, указываемой в свойстве require, которая в нашем случае будет компонентом.

Директива - самодостаточная единица (самостоятельное маленькое MVC приложение). По хорошему она может зависеть только от других директив, но ей глубоко должно быть плевать где именно и как ее используют

link директивы нужен ТОЛЬКО для того что бы связать DOM и логику. То есть в 99% случаев в директиве будет только link или только контроллер. Оба - это уже стремно, в этом случае лучше вынести ту логику которую хочется запихнуть в link в отдельную директиву.

контроллер реализует всю логику (или делегирует модели). Вся логика не относящаяся к DOM а например относящаяся к обработке данных должна быть вынесена в контроллер(директивы)

когда мы наследуем 1 директиву от другой(require) - то все изменения переменных в дочерней - обновляют родителя

 конечно, вся работа с данными должна быть в сервисах. Контроллеры должны быть максимально тонкими. 

В link же содержится индивидуальная логика директивы, поэтому весь код не предназначенный для общего использования помещайте туда. 
